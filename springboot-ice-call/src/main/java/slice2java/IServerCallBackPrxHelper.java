// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `call.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package slice2java;

/**
 * Provides type-specific helper functions.
 **/
public final class IServerCallBackPrxHelper extends Ice.ObjectPrxHelperBase implements IServerCallBackPrx {
    private static final String __response_name = "response";

    public boolean response(String msg) {
        return response(msg, null, false);
    }

    public boolean response(String msg, java.util.Map<String, String> __ctx) {
        return response(msg, __ctx, true);
    }

    private boolean response(String msg, java.util.Map<String, String> __ctx, boolean __explicitCtx) {
        __checkTwowayOnly(__response_name);
        return end_response(begin_response(msg, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_response(String msg) {
        return begin_response(msg, null, false, false, null);
    }

    public Ice.AsyncResult begin_response(String msg, java.util.Map<String, String> __ctx) {
        return begin_response(msg, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_response(String msg, Ice.Callback __cb) {
        return begin_response(msg, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_response(String msg, java.util.Map<String, String> __ctx, Ice.Callback __cb) {
        return begin_response(msg, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_response(String msg, Callback_IServerCallBack_response __cb) {
        return begin_response(msg, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_response(String msg, java.util.Map<String, String> __ctx, Callback_IServerCallBack_response __cb) {
        return begin_response(msg, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_response(String msg,
                                          IceInternal.Functional_BoolCallback __responseCb,
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb) {
        return begin_response(msg, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_response(String msg,
                                          IceInternal.Functional_BoolCallback __responseCb,
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb,
                                          IceInternal.Functional_BoolCallback __sentCb) {
        return begin_response(msg, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_response(String msg,
                                          java.util.Map<String, String> __ctx,
                                          IceInternal.Functional_BoolCallback __responseCb,
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb) {
        return begin_response(msg, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_response(String msg,
                                          java.util.Map<String, String> __ctx,
                                          IceInternal.Functional_BoolCallback __responseCb,
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb,
                                          IceInternal.Functional_BoolCallback __sentCb) {
        return begin_response(msg, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_response(String msg,
                                           java.util.Map<String, String> __ctx,
                                           boolean __explicitCtx,
                                           boolean __synchronous,
                                           IceInternal.Functional_BoolCallback __responseCb,
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb,
                                           IceInternal.Functional_BoolCallback __sentCb) {
        return begin_response(msg, __ctx, __explicitCtx, __synchronous,
                new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb) {
                    public final void __completed(Ice.AsyncResult __result) {
                        IServerCallBackPrxHelper.__response_completed(this, __result);
                    }
                });
    }

    private Ice.AsyncResult begin_response(String msg,
                                           java.util.Map<String, String> __ctx,
                                           boolean __explicitCtx,
                                           boolean __synchronous,
                                           IceInternal.CallbackBase __cb) {
        __checkAsyncTwowayOnly(__response_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__response_name, __cb);
        try {
            __result.prepare(__response_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(msg);
            __result.endWriteParams();
            __result.invoke();
        } catch (Ice.Exception __ex) {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_response(Ice.AsyncResult __iresult) {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __response_name);
        try {
            if (!__result.__wait()) {
                try {
                    __result.throwUserException();
                } catch (Ice.UserException __ex) {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        } finally {
            if (__result != null) {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __response_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result) {
        slice2java.IServerCallBackPrx __proxy = (slice2java.IServerCallBackPrx) __result.getProxy();
        boolean __ret = false;
        try {
            __ret = __proxy.end_response(__result);
        } catch (Ice.LocalException __ex) {
            __cb.exception(__ex);
            return;
        } catch (Ice.SystemException __ex) {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     *
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IServerCallBackPrx checkedCast(Ice.ObjectPrx __obj) {
        return checkedCastImpl(__obj, ice_staticId(), IServerCallBackPrx.class, IServerCallBackPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     *
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IServerCallBackPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx) {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), IServerCallBackPrx.class, IServerCallBackPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     *
     * @param __obj   The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IServerCallBackPrx checkedCast(Ice.ObjectPrx __obj, String __facet) {
        return checkedCastImpl(__obj, __facet, ice_staticId(), IServerCallBackPrx.class, IServerCallBackPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     *
     * @param __obj   The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx   The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static IServerCallBackPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx) {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), IServerCallBackPrx.class, IServerCallBackPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     *
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static IServerCallBackPrx uncheckedCast(Ice.ObjectPrx __obj) {
        return uncheckedCastImpl(__obj, IServerCallBackPrx.class, IServerCallBackPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     *
     * @param __obj   The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static IServerCallBackPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet) {
        return uncheckedCastImpl(__obj, __facet, IServerCallBackPrx.class, IServerCallBackPrxHelper.class);
    }

    public static final String[] __ids =
            {
                    "::Ice::Object",
                    "::slice2java::IServerCallBack"
            };

    /**
     * Provides the Slice type ID of this type.
     *
     * @return The Slice type ID.
     **/
    public static String ice_staticId() {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, IServerCallBackPrx v) {
        __os.writeProxy(v);
    }

    public static IServerCallBackPrx __read(IceInternal.BasicStream __is) {
        Ice.ObjectPrx proxy = __is.readProxy();
        if (proxy != null) {
            IServerCallBackPrxHelper result = new IServerCallBackPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
