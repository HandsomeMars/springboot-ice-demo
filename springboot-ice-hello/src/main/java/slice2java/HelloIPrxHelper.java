// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `test.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package slice2java;

/**
 * Provides type-specific helper functions.
 **/
public final class HelloIPrxHelper extends Ice.ObjectPrxHelperBase implements HelloIPrx
{
    private static final String __hello_name = "hello";

    public int hello(String instr, Ice.StringHolder outstr)
    {
        return hello(instr, outstr, null, false);
    }

    public int hello(String instr, Ice.StringHolder outstr, java.util.Map<String, String> __ctx)
    {
        return hello(instr, outstr, __ctx, true);
    }

    private int hello(String instr, Ice.StringHolder outstr, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__hello_name);
        return end_hello(outstr, begin_hello(instr, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_hello(String instr)
    {
        return begin_hello(instr, null, false, false, null);
    }

    public Ice.AsyncResult begin_hello(String instr, java.util.Map<String, String> __ctx)
    {
        return begin_hello(instr, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_hello(String instr, Ice.Callback __cb)
    {
        return begin_hello(instr, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_hello(String instr, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_hello(instr, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_hello(String instr, Callback_HelloI_hello __cb)
    {
        return begin_hello(instr, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_hello(String instr, java.util.Map<String, String> __ctx, Callback_HelloI_hello __cb)
    {
        return begin_hello(instr, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_hello(String instr, 
                                       FunctionalCallback_HelloI_hello_Response __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_hello(instr, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_hello(String instr, 
                                       FunctionalCallback_HelloI_hello_Response __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_hello(instr, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_hello(String instr, 
                                       java.util.Map<String, String> __ctx, 
                                       FunctionalCallback_HelloI_hello_Response __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_hello(instr, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_hello(String instr, 
                                       java.util.Map<String, String> __ctx, 
                                       FunctionalCallback_HelloI_hello_Response __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_hello(instr, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_hello(String instr, 
                                        java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        FunctionalCallback_HelloI_hello_Response __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        class CB extends IceInternal.Functional_TwowayCallback implements _Callback_HelloI_hello
        {
            public CB(FunctionalCallback_HelloI_hello_Response responseCb, 
                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb, 
                      IceInternal.Functional_BoolCallback sentCb)
            {
                super(responseCb != null, exceptionCb, sentCb);
                __responseCb = responseCb;
            }

            public void response(int __ret, String outstr)
            {
                if(__responseCb != null)
                {
                    __responseCb.apply(__ret, outstr);
                }
            }

            public final void __completed(Ice.AsyncResult __result)
            {
                HelloIPrxHelper.__hello_completed(this, __result);
            }

            private final FunctionalCallback_HelloI_hello_Response __responseCb;
        }
        return begin_hello(instr, __ctx, __explicitCtx, __synchronous, new CB(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_hello(String instr, 
                                        java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__hello_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__hello_name, __cb);
        try
        {
            __result.prepare(__hello_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(instr);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public int end_hello(Ice.StringHolder outstr, Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __hello_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            outstr.value = __is.readString();
            int __ret;
            __ret = __is.readInt();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __hello_completed(_Callback_HelloI_hello __cb, Ice.AsyncResult __result)
    {
        slice2java.HelloIPrx __proxy = (slice2java.HelloIPrx)__result.getProxy();
        int __ret = 0;
        Ice.StringHolder outstr = new Ice.StringHolder();
        try
        {
            __ret = __proxy.end_hello(outstr, __result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret, outstr.value);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static HelloIPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), HelloIPrx.class, HelloIPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static HelloIPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), HelloIPrx.class, HelloIPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static HelloIPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), HelloIPrx.class, HelloIPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static HelloIPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), HelloIPrx.class, HelloIPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static HelloIPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, HelloIPrx.class, HelloIPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static HelloIPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, HelloIPrx.class, HelloIPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::slice2java::HelloI"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, HelloIPrx v)
    {
        __os.writeProxy(v);
    }

    public static HelloIPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            HelloIPrxHelper result = new HelloIPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
